{"version":3,"sources":["logo.svg","App.js","Animation.jsx","Home.js","serviceWorker.js","index.js"],"names":["module","exports","App","AnimationExample","noiseGrid","gd","Create","gridPts","this","space","innerBound","noisePts","props","pause","resume","bound","_create","time","ftime","speed","pointer","$subtract","center","divide","abs","forEach","p","step","x","y","form","fillOnly","point","Math","noise2D","size","PtsCanvas","Home","className","Container","Row","Col","xs","href","name","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,6MCyB5BC,I,2DCtBFC,EAAb,kDAEI,aAAe,IAAD,8BACZ,gBACKC,UAAY,GAFL,EAFlB,sDASM,IAAIC,EAAKC,IAAOC,QAASC,KAAKC,MAAMC,WAAY,GAAI,IACpDF,KAAKJ,UAAYE,IAAOK,SAAUN,EAAI,IAAM,GAAK,GAAI,MAV3D,2CAcUG,KAAKI,MAAMC,MACbL,KAAKC,MAAMI,QAEXL,KAAKC,MAAMK,WAjBnB,4BAuBUL,EAAOM,GACXP,KAAKQ,YAxBX,+BA8BMR,KAAKQ,YA9BX,8BAmCYC,EAAMC,GAAQ,IAAD,OAEnB,GAAKV,KAAKJ,UAAV,CAGA,IAAIe,EAAQX,KAAKC,MAAMW,QAAQC,UAAWb,KAAKC,MAAMa,QAASC,OAAQf,KAAKC,MAAMa,QAASE,MAG1FhB,KAAKJ,UAAUqB,SAAS,SAACC,GACvBA,EAAEC,KAAM,KAAM,EAAER,EAAMS,GAAI,KAAM,EAAET,EAAMU,IACxC,EAAKC,KAAKC,SAAS,QAAQC,MAAON,EAAGO,KAAKT,IAAKE,EAAEQ,UAAY,EAAKzB,MAAM0B,KAAKP,EAAE,IAAM,kBA7C7F,G,MAAsCQ,GC4BvBC,MAxBf,WACI,OACI,yBAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,GAAT,UACA,kBAACD,EAAA,EAAD,CAAKC,GAAI,GAAG,uBAAGC,KAAK,KAAR,MAAZ,KACA,kBAACF,EAAA,EAAD,CAAKC,GAAI,GAAG,uBAAGC,KAAK,MAAR,MAAZ,OAGR,kBAACJ,EAAA,EAAD,KACI,kBAAC,EAAD,CACIK,KAAK,UACLC,WAAW,YCZXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23478965.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import {Pt, Group, Line, Create, Sound, Triangle, Const, Geom} from 'pts';\r\nimport {PtsCanvas} from 'react-pts-canvas';\r\n\r\nexport class AnimationExample extends PtsCanvas {\r\n\r\n    constructor() {\r\n      super();\r\n      this.noiseGrid = [];\r\n    }\r\n  \r\n    _create() {\r\n      // Create a line and a grid, and convert them to `Noise` points\r\n      let gd = Create.gridPts( this.space.innerBound, 20, 20 );\r\n      this.noiseGrid = Create.noisePts( gd, 0.05, 0.1, 20, 20 );\r\n    }\r\n  \r\n    componentDidUpdate() {\r\n      if (this.props.pause) {\r\n        this.space.pause();\r\n      } else {\r\n        this.space.resume();\r\n      }\r\n    }\r\n  \r\n  \r\n    // Override PtsCanvas' start function\r\n    start(space, bound) {\r\n      this._create();\r\n    }\r\n  \r\n  \r\n    // Override PtsCanvas' resize function\r\n    resize() {\r\n      this._create();\r\n    }\r\n  \r\n  \r\n    // Override PtsCanvas' animate function\r\n    animate(time, ftime) {\r\n  \r\n      if (!this.noiseGrid) return;\r\n  \r\n      // Use pointer position to change speed\r\n      let speed = this.space.pointer.$subtract( this.space.center ).divide( this.space.center ).abs();\r\n  \r\n      // Generate noise in a grid\r\n      this.noiseGrid.forEach( (p) => {\r\n        p.step( 0.01*(1-speed.x), 0.01*(1-speed.y) );\r\n        this.form.fillOnly(\"#123\").point( p, Math.abs( p.noise2D() * this.space.size.x/18 ), \"circle\" );\r\n      });\r\n  \r\n    }\r\n  \r\n  }","import React from 'react';\r\nimport './Styles.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport {AnimationExample} from './Animation';\r\n\r\nfunction Home(){\r\n    return(\r\n        <div className=\"Home\">\r\n            <Container>\r\n                <Row>\r\n                    <Col>Música</Col>\r\n                    <Col>Imágen</Col>\r\n                    <Col>Letras</Col>\r\n                    <Col>Acerca</Col>\r\n                    <Col xs={6}>Acerca</Col>\r\n                    <Col xs={1}><a href=\"x\">YT</a> </Col>\r\n                    <Col xs={1}><a href=\"sc\">SC</a> </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <AnimationExample \r\n                    name=\"example\" \r\n                    background=\"#fe3\"\r\n                />\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}